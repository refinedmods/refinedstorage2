plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
}

archivesBaseName = 'refinedstorage2-platform-fabric'

repositories {
    maven {
        name = 'Patchouli'
        url 'https://maven.blamejared.com'
    }
    maven {
        name = 'REI'
        url 'https://maven.terraformersmc.com/'
    }
    maven {
        name = 'Cloth Config'
        url 'https://maven.shedaniel.me/'
    }
    maven {
        name = 'Parchment'
        url 'https://maven.parchmentmc.org'
    }
    maven {
        name = 'wthit'
        url "https://maven.bai.lol"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraftVersion}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraftVersion}:${project.parchmentVersion}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.fabricLoaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricApiVersion}"

    implementation project(':refinedstorage2-core-api')
    include project(':refinedstorage2-core-api')

    implementation project(':refinedstorage2-resource-api')
    include project(':refinedstorage2-resource-api')

    implementation project(':refinedstorage2-storage-api')
    include project(':refinedstorage2-storage-api')

    implementation project(':refinedstorage2-network-api')
    include project(':refinedstorage2-network-api')

    implementation project(':refinedstorage2-query-parser')
    include project(':refinedstorage2-query-parser')

    implementation project(':refinedstorage2-grid-api')
    include project(':refinedstorage2-grid-api')

    implementation project(':refinedstorage2-platform-abstractions')
    implementation project(':refinedstorage2-platform-common')
    implementation project(':refinedstorage2-platform-api')

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.clothConfigVersion}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }
    include "me.shedaniel.cloth:cloth-config-fabric:${project.clothConfigVersion}"

    modApi("teamreborn:energy:${project.energyVersion}") {
        exclude(group: 'net.fabricmc.fabric-api')
    }
    include "teamreborn:energy:${project.energyVersion}"

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api:${project.reiVersion}") {
        exclude(group: 'me.shedaniel.cloth')
    }
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.reiVersion}")
    modImplementation "com.terraformersmc:modmenu:${project.modMenuVersion}"
    modImplementation "vazkii.patchouli:Patchouli:${project.patchouliVersion}"

    modRuntimeOnly("mcp.mobius.waila:wthit:fabric-${project.wthitVersion}")
}

loom {
    accessWidenerPath = file("src/main/resources/refinedstorage2.accesswidener")
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

processResources {
    from project(":refinedstorage2-platform-common").sourceSets.main.resources
}

tasks.withType(JavaCompile) {
    source(project(":refinedstorage2-platform-common").sourceSets.main.allSource)
    source(project(":refinedstorage2-platform-abstractions").sourceSets.main.allSource)
    source(project(":refinedstorage2-platform-api").sourceSets.main.allSource)
}

jar {
    from '../LICENSE.md'
}
